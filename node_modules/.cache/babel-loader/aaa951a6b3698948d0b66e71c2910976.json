{"ast":null,"code":"var _jsxFileName = \"/Users/Mong/Desktop/react-app-daniel/src/containers/Series/index.js\";\nimport React, { Component } from 'react';\nimport SeriesList from '../../components/SeriesList';\nimport Loader from '../../components/Loader';\nimport 'whatwg-fetch'; // \"Vikings\", \"Lord of The Rings\", \"Game of Thrones\"\n\nclass Series extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSeriesInputChange = e => {\n      this.setState({\n        seriesName: e.target.value,\n        isFetching: true\n      });\n      fetch(\"http://api.tvmaze.com/search/shows?q=\".concat(e.target.value)).then(response => response.json()).then(json => this.setState({\n        series: json,\n        isFetching: false\n      })); // This will make the search method (if I write Vikings in the text input)\n      // It will fetch the data from the link\n      // Awesome!!!\n      // console.log(e)\n      // console.log(e.target.value)\n\n      console.log(this.state.seriesName);\n    };\n\n    this.state = {\n      series: [],\n      seriesName: '',\n      isFetching: false\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          series = _this$state.series,\n          seriesName = _this$state.seriesName,\n          isFetching = _this$state.isFetching;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: seriesName,\n      type: \"text\",\n      onChange: this.onSeriesInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })), !isFetching && series.length === 0 && seriesName.trim() === '' && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Search the TV series that you want by typing the name in the bar provided\"), !isFetching && series.length === 0 && seriesName.trim() !== '' && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Sorry, but the TV series that you search cannot be found\"), isFetching && React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), !isFetching && seriesName.trim() !== '' && series.length !== 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Here is what we found by far\"), React.createElement(SeriesList, {\n      list: this.state.series,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Series;","map":{"version":3,"sources":["/Users/Mong/Desktop/react-app-daniel/src/containers/Series/index.js"],"names":["React","Component","SeriesList","Loader","Series","constructor","props","onSeriesInputChange","e","setState","seriesName","target","value","isFetching","fetch","then","response","json","series","console","log","state","render","length","trim"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAO,cAAP,C,CACA;;AACA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC3BI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAUlBC,mBAVkB,GAUIC,CAAC,IAAI;AACvB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEF,CAAC,CAACG,MAAF,CAASC,KADX;AAEVC,QAAAA,UAAU,EAAE;AAFF,OAAd;AAIAC,MAAAA,KAAK,gDAAyCN,CAAC,CAACG,MAAF,CAASC,KAAlD,EAAL,CACGG,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQE,IAAI,IAAI,KAAKR,QAAL,CAAc;AAAES,QAAAA,MAAM,EAAED,IAAV;AAAgBJ,QAAAA,UAAU,EAAE;AAA5B,OAAd,CAFhB,EALuB,CASvB;AACA;AACA;AAEA;AACA;;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWX,UAAvB;AACH,KA1BiB;;AAEd,SAAKW,KAAL,GAAa;AACTH,MAAAA,MAAM,EAAE,EADC;AAETR,MAAAA,UAAU,EAAE,EAFH;AAGTG,MAAAA,UAAU,EAAE;AAHH,KAAb;AAMH;;AAoBDS,EAAAA,MAAM,GAAE;AAAA,wBACqC,KAAKD,KAD1C;AAAA,UACGH,MADH,eACGA,MADH;AAAA,UACWR,UADX,eACWA,UADX;AAAA,UACuBG,UADvB,eACuBA,UADvB;AAGJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,KAAK,EAAIH,UADb;AAEI,MAAA,IAAI,EAAG,MAFX;AAGI,MAAA,QAAQ,EAAI,KAAKH,mBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EAUQ,CAACM,UAAD,IAAeK,MAAM,CAACK,MAAP,KAAkB,CAAjC,IAAsCb,UAAU,CAACc,IAAX,OAAsB,EAA5D,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAXR,EAcQ,CAACX,UAAD,IAAeK,MAAM,CAACK,MAAP,KAAkB,CAAjC,IAAsCb,UAAU,CAACc,IAAX,OAAsB,EAA5D,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAfR,EAkBQX,UAAU,IACV,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBR,EAsBQ,CAACA,UAAD,IAAeH,UAAU,CAACc,IAAX,OAAsB,EAArC,IAA2CN,MAAM,CAACK,MAAP,KAAkB,CAA7D,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAI,KAAKF,KAAL,CAAWH,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAvBR,EA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BJ,EA4BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BT,EA4Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5Bd,CADJ;AAgCH;;AAhE0B;;AAmE/B,eAAed,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport SeriesList from '../../components/SeriesList';\nimport Loader from '../../components/Loader';\nimport 'whatwg-fetch';\n// \"Vikings\", \"Lord of The Rings\", \"Game of Thrones\"\nclass Series extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            series: [],\n            seriesName: '',\n            isFetching: false\n        };\n        \n    }\n    \n    onSeriesInputChange = e => {\n        this.setState({\n            seriesName: e.target.value,\n            isFetching: true\n        });\n        fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\n          .then(response => response.json())\n          .then(json => this.setState({ series: json, isFetching: false }));\n\n        // This will make the search method (if I write Vikings in the text input)\n        // It will fetch the data from the link\n        // Awesome!!!\n\n        // console.log(e)\n        // console.log(e.target.value)\n        console.log(this.state.seriesName)\n    }\n\n    render(){\n        const {series, seriesName, isFetching} = this.state;\n\n        return (\n            <div>\n                {/* The length of series array - {this.state.series.length} */}\n                <div>\n                    <input\n                        value = {seriesName}\n                        type = \"text\" \n                        onChange = {this.onSeriesInputChange}\n                    />\n                </div>\n                {\n                    !isFetching && series.length === 0 && seriesName.trim() === '' &&\n                    <p>Search the TV series that you want by typing the name in the bar provided</p>\n                }\n                {\n                    !isFetching && series.length === 0 && seriesName.trim() !== '' &&\n                    <p>Sorry, but the TV series that you search cannot be found</p>\n                }\n                {\n                    isFetching && \n                    <Loader />\n                }\n                {\n                    !isFetching && seriesName.trim() !== '' && series.length !== 0 &&\n                    <div>\n                        <p>Here is what we found by far</p>\n                        <SeriesList list = {this.state.series} />\n                    </div>\n                }\n                <br/><br/><br/>\n            </div>\n        )\n    }\n}\n\nexport default Series;"]},"metadata":{},"sourceType":"module"}